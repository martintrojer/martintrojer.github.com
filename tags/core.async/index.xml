<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Core.async on Martin Trojer</title>
    <link>https://martintrojer.github.io/tags/core.async/</link>
    <description>Recent content in Core.async on Martin Trojer</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 09 Mar 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://martintrojer.github.io/tags/core.async/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Working with core.async: Blocking calls</title>
      <link>https://martintrojer.github.io/post/2014-03-09-working-with-coreasync-blocking-calls/</link>
      <pubDate>Sun, 09 Mar 2014 00:00:00 +0000</pubDate>
      <guid>https://martintrojer.github.io/post/2014-03-09-working-with-coreasync-blocking-calls/</guid>
      <description>&lt;p&gt;You can&amp;rsquo;t do anything even remotely blocking inside go-blocks. This is because all the core.async go blocks share a single thread pool, with a very limited number of threads (go blocks are supposed to be CPU bound). So if you have hundreds/thousands of go blocks running concurrently, just having a few (a handful really) block &amp;ndash; &lt;em&gt;all&lt;/em&gt; go blocks will stop! For a more in-depth explanation see &lt;a href=&#34;https://martintrojer.github.io/post/2013-07-07-coreasync-and-blocking-io/&#34;&gt;this previous post&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Working with core.async: Chaining go blocks</title>
      <link>https://martintrojer.github.io/post/2014-03-09-working-with-coreasync-chaining-go-blocks/</link>
      <pubDate>Sun, 09 Mar 2014 00:00:00 +0000</pubDate>
      <guid>https://martintrojer.github.io/post/2014-03-09-working-with-coreasync-chaining-go-blocks/</guid>
      <description>&lt;p&gt;One particularly annoying difference between core.async and &lt;a href=&#34;http://golang.org&#34;&gt;Go&lt;/a&gt; is that you can&amp;rsquo;t wrap function calls with the &lt;code&gt;go&lt;/code&gt; macro. This is due to implementation details of core.async, which can only see the body &amp;lsquo;inside&amp;rsquo; the macro and not the functions it may call. This is obviously not a problem if the called function doesn&amp;rsquo;t interact with any channels, but if it does, then you might be in trouble. I&amp;rsquo;ve touched on this subject in a &lt;a href=&#34;https://martintrojer.github.io/post/2013-07-17-non-tailrecursive-functions-in-coreasync/&#34;&gt;previous post&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Working with core.async: Exceptions in go blocks</title>
      <link>https://martintrojer.github.io/post/2014-03-09-working-with-coreasync-exceptions-in-go-blocks/</link>
      <pubDate>Sun, 09 Mar 2014 00:00:00 +0000</pubDate>
      <guid>https://martintrojer.github.io/post/2014-03-09-working-with-coreasync-exceptions-in-go-blocks/</guid>
      <description>&lt;p&gt;Dealing with exceptions in go blocks/threads is different from normal Clojure core. This gotcha is very common when moving your code into core.async go blocks &amp;ndash; all your exceptions are gone! Since the body of a go block is run on a thread pool, there&amp;rsquo;s not much we can do with an exception, thus core.async will just eat them and close the channel. That&amp;rsquo;s what happened in the second snippet &lt;a href=&#34;https://martintrojer.github.io/post/2014-03-09-working-with-coreasync-chaining-go-blocks/&#34;&gt;in this post&lt;/a&gt;. The &lt;code&gt;nil&lt;/code&gt; result occurs because the channel we read from is closed.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Non tail-recursive functions in core.async go blocks</title>
      <link>https://martintrojer.github.io/post/2013-07-17-non-tailrecursive-functions-in-coreasync/</link>
      <pubDate>Wed, 17 Jul 2013 00:00:00 +0000</pubDate>
      <guid>https://martintrojer.github.io/post/2013-07-17-non-tailrecursive-functions-in-coreasync/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been using various &lt;a href=&#34;http://go-lang.org/&#34;&gt;Go&lt;/a&gt; examples and tutorials to take a deeper look into &lt;a href=&#34;https://github.com/clojure/core.async&#34;&gt;core.async&lt;/a&gt;. The &lt;a href=&#34;http://en.wikipedia.org/wiki/Communicating_sequential_processes&#34;&gt;CSP&lt;/a&gt; pattern is very interesting and powerful; it&amp;rsquo;s a good move for Clojure to &amp;ldquo;throw in&amp;rdquo; with Go and push this style of programming.&lt;/p&gt;&#xA;&lt;p&gt;core.async works at the s-expression level, where some other JVM solutions (&lt;a href=&#34;http://www.malhar.net/sriram/kilim/&#34;&gt;Kilim&lt;/a&gt;, &lt;a href=&#34;https://github.com/puniverse/pulsar&#34;&gt;Pulsar&lt;/a&gt;) do the same at the byte-code level. The main benefit of doing these transforms at the s-expression level is that they are applicable to ClojureScript, where CSP can be a very neat way out of callback hell. &lt;a href=&#34;http://swannodette.github.io/2013/07/12/communicating-sequential-processes/&#34;&gt;David has written about this&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>core.async and Blocking IO</title>
      <link>https://martintrojer.github.io/post/2013-07-07-coreasync-and-blocking-io/</link>
      <pubDate>Sun, 07 Jul 2013 00:00:00 +0000</pubDate>
      <guid>https://martintrojer.github.io/post/2013-07-07-coreasync-and-blocking-io/</guid>
      <description>&lt;p&gt;Some time ago I wrote about &lt;a href=&#34;https://martintrojer.github.io/post/2011-12-22-asynchronous-workflows-in-clojure/&#34;&gt;Asynchronous workflows in Clojure&lt;/a&gt;. With the recent release and excitement of &lt;a href=&#34;https://github.com/clojure/core.async&#34;&gt;core.async&lt;/a&gt;, I thought it a good time to revisit that post.&lt;/p&gt;&#xA;&lt;p&gt;While there are already some good examples and comparison-with-&lt;a href=&#34;http://golang.org&#34;&gt;go&lt;/a&gt; posts out there, I&amp;rsquo;d like to focus on an area often misunderstood, namely async frameworks and blocking APIs (most commonly blocking IO). It&amp;rsquo;s important to understand the implications of blocking IO and its effects on &amp;lsquo;async code&amp;rsquo;, in this case core.async.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
