<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Core.logic on Martin Trojer</title>
    <link>https://martintrojer.github.io/tags/core.logic/</link>
    <description>Recent content in Core.logic on Martin Trojer</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 27 Sep 2012 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://martintrojer.github.io/tags/core.logic/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Some core.logic graph code</title>
      <link>https://martintrojer.github.io/post/2012-09-27-some-corelogic-graph-code/</link>
      <pubDate>Thu, 27 Sep 2012 00:00:00 +0000</pubDate>
      <guid>https://martintrojer.github.io/post/2012-09-27-some-corelogic-graph-code/</guid>
      <description></description>
    </item>
    <item>
      <title>cKanren time!</title>
      <link>https://martintrojer.github.io/post/2012-08-12-ckanren-time/</link>
      <pubDate>Sun, 12 Aug 2012 00:00:00 +0000</pubDate>
      <guid>https://martintrojer.github.io/post/2012-08-12-ckanren-time/</guid>
      <description>&lt;p&gt;Mr. David Nolen recently published core.logic 0.8.alpha2, with added cKanren (c for constraints) support. To celebrate this glorious event, I&amp;rsquo;m writing up some core.logic/cKanren stuff I&amp;rsquo;ve been looking at recently.&lt;/p&gt;&#xA;&lt;h3 id=&#34;enter-the-queens&#34;&gt;Enter the Queens&lt;/h3&gt;&#xA;&lt;p&gt;If you&amp;rsquo;ve followed this blog, you&amp;rsquo;ve perhaps seen my previous posts on solving N-Queens in core.logic (&lt;a href=&#34;https://martintrojer.github.io/post/2012-07-16-replicating-datomicdatalog-queries-with-corelogic/&#34;&gt;part 1&lt;/a&gt; and &lt;a href=&#34;https://martintrojer.github.io/post/2012-07-17-replicating-datomicdatalog-queries-with-corelogic-take-2/&#34;&gt;part 2&lt;/a&gt;). How will this look and perform using the new shiny cKanren extensions in core.logic 0.8? Obviously, there are many (new) ways to solve this problem. Here&amp;rsquo;s a core.logic-styled version of the solution described in the &lt;a href=&#34;http://www.schemeworkshop.org/2011/papers/Alvis2011.pdf&#34;&gt;cKanren paper&lt;/a&gt; (please read paragraph 4.2 for an in-depth explanation):&lt;/p&gt;</description>
    </item>
    <item>
      <title>Replicating Datomic/Datalog queries with core.logic, take 2</title>
      <link>https://martintrojer.github.io/post/2012-07-17-replicating-datomicdatalog-queries-with-corelogic-take-2/</link>
      <pubDate>Tue, 17 Jul 2012 00:00:00 +0000</pubDate>
      <guid>https://martintrojer.github.io/post/2012-07-17-replicating-datomicdatalog-queries-with-corelogic-take-2/</guid>
      <description>&lt;p&gt;This is a follow-up to my &lt;a href=&#34;https://martintrojer.github.io/post/2012-07-16-replicating-datomicdatalog-queries-with-corelogic/&#34;&gt;previous post&lt;/a&gt; on datalog-equivalent queries in core.logic.&lt;/p&gt;&#xA;&lt;p&gt;Here I present an alternate way to do the unification and join inside core.logic (without having to use clojure.set/join). It uses the relationships/facts API in core.logic, &lt;a href=&#34;https://github.com/clojure/core.logic/wiki/Features&#34;&gt;described here&lt;/a&gt;. First, let&amp;rsquo;s consider this Datomic query:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;:find&lt;/span&gt; ?first ?height&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#e6db74&#34;&gt;:in&lt;/span&gt; [[?last ?first ?email]] [[?email ?height]]]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   [[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Doe&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jdoe@example.com&amp;#34;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Doe&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jane&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jane@example.com&amp;#34;&lt;/span&gt;]]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   [[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jane@example.com&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;73&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jdoe@example.com&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt;]])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; #&amp;lt;HashSet [[&amp;#34;Jane&amp;#34; 73], [&amp;#34;John&amp;#34; 71]]&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In core.logic we start by defining the relationships between our 2 datasets:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Replicating Datomic/Datalog queries with core.logic</title>
      <link>https://martintrojer.github.io/post/2012-07-16-replicating-datomicdatalog-queries-with-corelogic/</link>
      <pubDate>Mon, 16 Jul 2012 00:00:00 +0000</pubDate>
      <guid>https://martintrojer.github.io/post/2012-07-16-replicating-datomicdatalog-queries-with-corelogic/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been toying with &lt;a href=&#34;http://datomic.com/&#34;&gt;Datomic&lt;/a&gt; recently, and I particularly like the power of its query language (~&lt;a href=&#34;http://en.wikipedia.org/wiki/Datalog&#34;&gt;Datalog&lt;/a&gt;). Mr. &lt;a href=&#34;https://twitter.com/stuarthalloway&#34;&gt;Halloway&lt;/a&gt; showed a couple of months ago how the query engine is generic enough to be run on standard Clojure collections, &lt;a href=&#34;https://gist.github.com/2645453&#34;&gt;gist here&lt;/a&gt;. Here is an example from that page of a simple join;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;:find&lt;/span&gt; ?first ?height&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#e6db74&#34;&gt;:in&lt;/span&gt; [[?last ?first ?email]] [[?email ?height]]]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   [[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Doe&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jdoe@example.com&amp;#34;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Doe&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Jane&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jane@example.com&amp;#34;&lt;/span&gt;]]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   [[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jane@example.com&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;73&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jdoe@example.com&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;71&lt;/span&gt;]])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;; #&amp;lt;HashSet [[&amp;#34;Jane&amp;#34; 73], [&amp;#34;John&amp;#34; 71]]&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A question you might ask yourself is how can you use &lt;a href=&#34;https://github.com/clojure/core.logic&#34;&gt;core.logic&lt;/a&gt; to do the same kind of queries? It turns out that it&amp;rsquo;s pretty straightforward, and also very fast. Core.logic provides some convenient helper functions for &lt;a href=&#34;https://github.com/clojure/core.logic#unification&#34;&gt;unification&lt;/a&gt; that we are going to use. Here&amp;rsquo;s an example of how to get a binding map for some logical variables over a collection;&lt;/p&gt;</description>
    </item>
    <item>
      <title>N Queens with core.logic, take 2</title>
      <link>https://martintrojer.github.io/post/2012-07-11-n-queens-with-corelogic-take-2/</link>
      <pubDate>Wed, 11 Jul 2012 00:00:00 +0000</pubDate>
      <guid>https://martintrojer.github.io/post/2012-07-11-n-queens-with-corelogic-take-2/</guid>
      <description>&lt;p&gt;This post is a follow-up to my &lt;a href=&#34;https://martintrojer.github.io/post/2012-07-07-n-queens-with-corelogic-take-1/&#34;&gt;previous post on N Queens and core.logic&lt;/a&gt;, in which I tried to find solutions using &amp;ldquo;pure&amp;rdquo; logic (without arithmetic goals) and basic miniKanren/Reasoned Schemer building blocks.&lt;/p&gt;&#xA;&lt;p&gt;After excellent feedback and hints from &lt;a href=&#34;https://twitter.com/swannodette&#34;&gt;David Nolen&lt;/a&gt; (big thanks), I present a greatly simplified (and faster) way of using core.logic to find all solutions. Credit also goes to &lt;a href=&#34;http://www.amazon.co.uk/Programming-Artificial-Intelligence-International-Computer/dp/0321417461/&#34;&gt;good old Bratko&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;First, let&amp;rsquo;s fix the safeo function (and def-subo macro). In miniKanren, you can use arithmetic goals given two prerequisites: the fresh variable must be bound to a finite (number) space, and we must use &lt;em&gt;project&lt;/em&gt; to bind the values. This means we can get rid of subo altogether.&lt;/p&gt;</description>
    </item>
    <item>
      <title>N Queens with core.logic, take 1</title>
      <link>https://martintrojer.github.io/post/2012-07-07-n-queens-with-corelogic-take-1/</link>
      <pubDate>Sat, 07 Jul 2012 00:00:00 +0000</pubDate>
      <guid>https://martintrojer.github.io/post/2012-07-07-n-queens-with-corelogic-take-1/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been &amp;ldquo;hammock-reading&amp;rdquo; the excellent &lt;a href=&#34;http://mitpress.mit.edu/catalog/item/default.asp?ttype=2&amp;amp;tid=10663&#34;&gt;Reasoned Schemer&lt;/a&gt; book these last couple of months, on my quest to develop a gut feel for when logic programming, as defined by miniKanren/core.logic, is applicable.&lt;/p&gt;&#xA;&lt;p&gt;My first attempt is to apply it to a problem where (as it turns out) miniKanren isn&amp;rsquo;t a good fit: &lt;a href=&#34;http://en.wikipedia.org/wiki/Eight_queens_puzzle&#34;&gt;n-queens&lt;/a&gt;. What you really need for this problem in the logical programming world is something called constraint logic programming (CLP), which is implemented (for example) in &lt;a href=&#34;http://www.schemeworkshop.org/2011/papers/Alvis2011.pdf&#34;&gt;cKanren&lt;/a&gt;. The good people at core.logic are working on integrating CLP and cKanren in core.logic &lt;a href=&#34;https://github.com/clojure/core.logic/&#34;&gt;in version 0.8&lt;/a&gt;, so I intend to revisit this problem as that work progresses.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
