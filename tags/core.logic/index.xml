<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>core.logic on Martin Trojer</title>
    <link>https://martintrojer.github.io/tags/core.logic/</link>
    <description>Recent content in core.logic on Martin Trojer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 27 Sep 2012 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://martintrojer.github.io/tags/core.logic/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Some core.logic graph code</title>
      <link>https://martintrojer.github.io/post/2012-09-27-some-corelogic-graph-code/</link>
      <pubDate>Thu, 27 Sep 2012 00:00:00 +0000</pubDate>
      <guid>https://martintrojer.github.io/post/2012-09-27-some-corelogic-graph-code/</guid>
      <description></description>
    </item>
    <item>
      <title>cKanren time!</title>
      <link>https://martintrojer.github.io/post/2012-08-12-ckanren-time/</link>
      <pubDate>Sun, 12 Aug 2012 00:00:00 +0000</pubDate>
      <guid>https://martintrojer.github.io/post/2012-08-12-ckanren-time/</guid>
      <description>Mr David Nolen recently published core.logic 0.8.alpha2, with added cKanren (c for constraints) support. To celebrate this glorious event I&amp;rsquo;m writing up some core.logic/cKanren stuff I&amp;rsquo;ve been looking at recently.&#xA;Enter the Queens If you&amp;rsquo;ve followed this blog, you&amp;rsquo;ve perhaps seen my previous posts on solving N-Queens in core.logic (part1 and part2). How will this look and perform using the new shiny cKanren extensions in core.logic 0.8? Obviously there are many (new) ways to solve this problem, here&amp;rsquo;s a core.</description>
    </item>
    <item>
      <title>Replicating Datomic/Datalog queries with core.logic, take 2</title>
      <link>https://martintrojer.github.io/post/2012-07-17-replicating-datomicdatalog-queries-with-corelogic-take-2/</link>
      <pubDate>Tue, 17 Jul 2012 00:00:00 +0000</pubDate>
      <guid>https://martintrojer.github.io/post/2012-07-17-replicating-datomicdatalog-queries-with-corelogic-take-2/</guid>
      <description>This is a follow-up to my previous post on datalog-equivalent queries in core.logic.&#xA;Here I present an alternate way to do the unification and join inside core.logic (without having to use clojure.set/join). It uses the the relationships / facts API in core logic, described here. First let&amp;rsquo;s consider this datomic query;&#xA;(q &amp;#39;[:find ?first ?height :in [[?last ?first ?email]] [[?email ?height]]] [[&amp;#34;Doe&amp;#34; &amp;#34;John&amp;#34; &amp;#34;jdoe@example.com&amp;#34;] [&amp;#34;Doe&amp;#34; &amp;#34;Jane&amp;#34; &amp;#34;jane@example.com&amp;#34;]] [[&amp;#34;jane@example.com&amp;#34; 73] [&amp;#34;jdoe@example.com&amp;#34; 71]]) ;; #&amp;lt;HashSet [[&amp;#34;Jane&amp;#34; 73], [&amp;#34;John&amp;#34; 71]]&amp;gt; In core.</description>
    </item>
    <item>
      <title>Replicating Datomic/Datalog queries with core.logic</title>
      <link>https://martintrojer.github.io/post/2012-07-16-replicating-datomicdatalog-queries-with-corelogic/</link>
      <pubDate>Mon, 16 Jul 2012 00:00:00 +0000</pubDate>
      <guid>https://martintrojer.github.io/post/2012-07-16-replicating-datomicdatalog-queries-with-corelogic/</guid>
      <description>I&amp;rsquo;ve been toying with Datomic recently, and I particularly like the power of it&amp;rsquo;s query language (~Datalog). Mr Halloway showed a couple of months ago how the query engine is generic enough to be run on standard Clojure collections, gist here. Here is an example from that page of a simple join;&#xA;(q &amp;#39;[:find ?first ?height :in [[?last ?first ?email]] [[?email ?height]]] [[&amp;#34;Doe&amp;#34; &amp;#34;John&amp;#34; &amp;#34;jdoe@example.com&amp;#34;] [&amp;#34;Doe&amp;#34; &amp;#34;Jane&amp;#34; &amp;#34;jane@example.com&amp;#34;]] [[&amp;#34;jane@example.com&amp;#34; 73] [&amp;#34;jdoe@example.</description>
    </item>
    <item>
      <title>N Queens with core.logic, take 2</title>
      <link>https://martintrojer.github.io/post/2012-07-11-n-queens-with-corelogic-take-2/</link>
      <pubDate>Wed, 11 Jul 2012 00:00:00 +0000</pubDate>
      <guid>https://martintrojer.github.io/post/2012-07-11-n-queens-with-corelogic-take-2/</guid>
      <description>This post is a follow-up to my previous post on NQueens and core.logic, in which I tried to find the solutions using &amp;ldquo;pure&amp;rdquo; logic (without arithmetic goals) and basic minKanren / Reasoner Schemer building blocks.&#xA;After some excellent feedback and hints from Mr David Nolen (big thanks), I here present a greatly simplified (and faster) way of using core.logic to find all solutions. Credit also goes to good old Bratko.</description>
    </item>
    <item>
      <title>N Queens with core.logic, take 1</title>
      <link>https://martintrojer.github.io/post/2012-07-07-n-queens-with-corelogic-take-1/</link>
      <pubDate>Sat, 07 Jul 2012 00:00:00 +0000</pubDate>
      <guid>https://martintrojer.github.io/post/2012-07-07-n-queens-with-corelogic-take-1/</guid>
      <description>I&amp;rsquo;ve been &amp;ldquo;hammock-reading&amp;rdquo; the excellent Reasoned Schemer book the last couple of months, on my quest trying to develop a gut feel for when logic programming, as defined by miniKanren/core.logic, is applicable.&#xA;My first attempt is to apply it to a problem where (as it turns out) miniKanren isn&amp;rsquo;t a good fit, n-queens. What you really need for this, in logical programming world, for this problem is something called contraint logic programming (CLP) which is implemented (for example) in cKanren.</description>
    </item>
  </channel>
</rss>
