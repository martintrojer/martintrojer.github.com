<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scala on Martin Trojer</title>
    <link>https://martintrojer.github.io/tags/scala/</link>
    <description>Recent content in Scala on Martin Trojer</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 25 Jun 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://martintrojer.github.io/tags/scala/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Announcing Frins, a practical unit of measure calculator DSL for Scala</title>
      <link>https://martintrojer.github.io/post/2013-06-25-announcing-frins-a-practical-unit-of-measure-calculator-dsl-for-scala/</link>
      <pubDate>Tue, 25 Jun 2013 00:00:00 +0000</pubDate>
      <guid>https://martintrojer.github.io/post/2013-06-25-announcing-frins-a-practical-unit-of-measure-calculator-dsl-for-scala/</guid>
      <description>&lt;p&gt;I am proud to announce a new Scala project called &amp;ldquo;Frins.&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;Frins is a practical unit-of-measure calculator DSL for Scala.&lt;/p&gt;&#xA;&lt;p&gt;Key features:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Tracks units of measure through all calculations, allowing you to mix units of measure transparently&lt;/li&gt;&#xA;&lt;li&gt;Comes with a &lt;strong&gt;huge&lt;/strong&gt; database of units and conversion factors&lt;/li&gt;&#xA;&lt;li&gt;Inspired by the &lt;a href=&#34;http://futureboy.us/frinkdocs/&#34;&gt;Frink project&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Full source code is available on &lt;a href=&#34;https://github.com/martintrojer/frins&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;To whet your appetite, head straight over to the &lt;a href=&#34;https://github.com/martintrojer/frins/blob/master/src/main/scala/frins/ExampleCalculations.scala&#34;&gt;example calculations&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h3 id=&#34;how-frins-came-about&#34;&gt;How Frins Came About&lt;/h3&gt;&#xA;&lt;p&gt;About a year ago, I created &lt;a href=&#34;https://github.com/martintrojer/frinj&#34;&gt;Frinj&lt;/a&gt;. With Frinj, I tried to marry some of the joys of one of my favorite programming languages (Frink) with the Clojure REPL. I was quite pleased with the results, and the response was encouraging.&lt;/p&gt;</description>
    </item>
    <item>
      <title>EDN Parser in Scala</title>
      <link>https://martintrojer.github.io/post/2013-06-17-edn-parser-in-scala/</link>
      <pubDate>Mon, 17 Jun 2013 00:00:00 +0000</pubDate>
      <guid>https://martintrojer.github.io/post/2013-06-17-edn-parser-in-scala/</guid>
      <description>&lt;p&gt;Taken from &lt;a href=&#34;https://github.com/martintrojer/edn-scala&#34;&gt;edn-scala&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Scheme in Scala</title>
      <link>https://martintrojer.github.io/post/2013-06-06-scheme-in-scala/</link>
      <pubDate>Thu, 06 Jun 2013 00:00:00 +0000</pubDate>
      <guid>https://martintrojer.github.io/post/2013-06-06-scheme-in-scala/</guid>
      <description>&lt;p&gt;In this post, I present some of my experiences writing a &lt;a href=&#34;https://github.com/martintrojer/scheme-scala&#34;&gt;Scheme interpreter in Scala&lt;/a&gt; (as an external DSL) and compare it with my recent similar experiences in Clojure and F#.&lt;/p&gt;&#xA;&lt;p&gt;Overall, the Scala solution is very similar to the &lt;a href=&#34;https://github.com/martintrojer/scheme-fsharp&#34;&gt;F# one&lt;/a&gt;. Not very surprising, since the problem lends itself well to case classes / discriminated union types and pattern matching. One difference is more type declarations in Scala, due to the lack of Hindley-Milner type inference. Scala uses a &amp;ldquo;flow-based&amp;rdquo; type inferrer, which is less powerful than ML but apparently works better for OO subclasses, etc. I will look into this in a future blog post.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Comparing FP REPL Sessions</title>
      <link>https://martintrojer.github.io/post/2013-06-04-comparing-fp-repl-sessions/</link>
      <pubDate>Tue, 04 Jun 2013 00:00:00 +0000</pubDate>
      <guid>https://martintrojer.github.io/post/2013-06-04-comparing-fp-repl-sessions/</guid>
      <description>&lt;p&gt;Functional programming is great; higher-order functions, closures, immutable data-structures, lazy sequences etc.&lt;/p&gt;&#xA;&lt;p&gt;Most languages comes with a REPL (or &amp;lsquo;interactive&amp;rsquo; prompt), where you can play with these features at your leisure. Dynamically typed languages are a bit more convenient in the REPL, but not by as much as you might think. Also, F# type providers closes the gap even further.&lt;/p&gt;&#xA;&lt;p&gt;Here&amp;rsquo;s a typical, hit-a-JSON-endpoint-and-look-at-the-data session in Clojure;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ lein repl&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user=&amp;gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;res (slurp &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.bbc.co.uk/tv/programmes/genres/drama/scifiandfantasy/schedules/upcoming.json&amp;#34;&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user=&amp;gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;clojure.data.json&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;clojure.walk&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user=&amp;gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;def &lt;/span&gt;json (&lt;span style=&#34;color:#a6e22e&#34;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; res clojure.data.json/read-str&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      clojure.walk/keywordize-keys))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user=&amp;gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; json &lt;span style=&#34;color:#e6db74&#34;&gt;:broadcasts&lt;/span&gt; (filter &lt;span style=&#34;color:#f92672&#34;&gt;#&lt;/span&gt;(&amp;gt;= (&lt;span style=&#34;color:#e6db74&#34;&gt;:duration&lt;/span&gt; %) &lt;span style=&#34;color:#ae81ff&#34;&gt;6300&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            (map &lt;span style=&#34;color:#e6db74&#34;&gt;:programme&lt;/span&gt;) (map (&lt;span style=&#34;color:#a6e22e&#34;&gt;juxt&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:title&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:pid&lt;/span&gt;)))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Lady in the Water&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b00l5wdn&amp;#34;&lt;/span&gt;] [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Lady in the Water&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b00l5wdn&amp;#34;&lt;/span&gt;] [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Lady in the Water&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b00l5wdn&amp;#34;&lt;/span&gt;] [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Lady in the Water&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b00l5wdn&amp;#34;&lt;/span&gt;])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Nice, clean and very powerful, virtually zero ceremony. Doing the same in Scala, is just a little bit more awkward;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Scala and me</title>
      <link>https://martintrojer.github.io/post/2013-06-01-scala-and-me/</link>
      <pubDate>Sat, 01 Jun 2013 00:00:00 +0000</pubDate>
      <guid>https://martintrojer.github.io/post/2013-06-01-scala-and-me/</guid>
      <description>&lt;figure class=&#34;floatright&#34;&gt;&lt;img src=&#34;https://martintrojer.github.io/assets/images/scalame/martin.png&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;This epic journey (yeah right) began at university with discovering the mighty &lt;a href=&#34;http://mitpress.mit.edu/sicp/&#34;&gt;SICP&lt;/a&gt;, still the best book on programming I&amp;rsquo;ve read (and let&amp;rsquo;s face it, the best I will ever read). After that profound experience, I kept an eye on the Lisp/FP world and wrote some toys in &lt;a href=&#34;http://plt-scheme.org/&#34;&gt;Scheme&lt;/a&gt;, &lt;a href=&#34;http://en.wikipedia.org/wiki/Emacs_Lisp&#34;&gt;ELisp&lt;/a&gt;, and &lt;a href=&#34;http://ocaml.org/&#34;&gt;OCaml&lt;/a&gt; every now and then. One thing that dawned on me was that none of these languages had much practical use; they weren&amp;rsquo;t very applicable to real-world software problems. While very clever and mind-expanding, they seemed mainly an academic exercise. There were zero jobs out there using these languages. Heck, hardly any of my peers had heard of or cared about them.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Some thoughts on Clojure performance</title>
      <link>https://martintrojer.github.io/post/2012-02-18-some-thoughts-on-clojure-performance/</link>
      <pubDate>Sat, 18 Feb 2012 00:00:00 +0000</pubDate>
      <guid>https://martintrojer.github.io/post/2012-02-18-some-thoughts-on-clojure-performance/</guid>
      <description>&lt;p&gt;&lt;em&gt;Edit&lt;/em&gt;: This post recently re-surfaced on hacker news and caused a bit of a stir, mainly because of a slightly sensational/misleading title (was &amp;ldquo;Why is Clojure so slow?&amp;rdquo;). I wrote this before &lt;a href=&#34;http://www.youtube.com/watch?v=I5iNUtrYQSM&#34;&gt;Rich Hickey&amp;rsquo;s Clojure/Conj 2011 keynote&lt;/a&gt; was published, in which he talks about most of my concerns (and outlines possible solutions).&lt;/p&gt;&#xA;&lt;p&gt;Clojure is great in many ways, but one thing it can&amp;rsquo;t be accused of is being particularly fast. What I mean by fast here is the speed at which Clojure programs execute. This is a well-known issue in the Clojure community and has been discussed on the &lt;a href=&#34;http://groups.google.com/group/clojure&#34;&gt;mailing list&lt;/a&gt; and &lt;a href=&#34;http://stackoverflow.com/questions/2531616/why-is-the-clojure-hello-world-program-so-slow-compared-to-java-and-python&#34;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tail Calls in F#, Clojure and Scala</title>
      <link>https://martintrojer.github.io/post/2011-11-20-tail-calls-in-f-clojure-and-scala/</link>
      <pubDate>Sun, 20 Nov 2011 00:00:00 +0000</pubDate>
      <guid>https://martintrojer.github.io/post/2011-11-20-tail-calls-in-f-clojure-and-scala/</guid>
      <description>&lt;p&gt;I recently looked into Tail Call Optimisation/Elimination (TCO) and the implications for 3 modern languages, namely F#, Clojure and Scala. In this post I share my findings. If you&amp;rsquo;re new to the subject or just looking into some of these languages I hope this post can be of some use to you. I will mix code snippets in the 3 languages freely (and without warning! :)&lt;/p&gt;&#xA;&lt;p&gt;TCO is a well documented topic in books and articles about functional programming, and the TCO in .NET and the lack thereof in the JVM has been debated &amp;ldquo;to death&amp;rdquo; on various programmers&amp;rsquo; boards. I don&amp;rsquo;t intend to add any fuel to the fire here, rather some background and practical implications.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
