<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>beyond-clojure on Martin Trojer</title>
    <link>https://martintrojer.github.io/categories/beyond-clojure/</link>
    <description>Recent content in beyond-clojure on Martin Trojer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 03 May 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://martintrojer.github.io/categories/beyond-clojure/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Beyond ClojureScript: Elm</title>
      <link>https://martintrojer.github.io/post/2016-05-03-beyond-clojurescript-elm/</link>
      <pubDate>Tue, 03 May 2016 00:00:00 +0000</pubDate>
      <guid>https://martintrojer.github.io/post/2016-05-03-beyond-clojurescript-elm/</guid>
      <description>&lt;p&gt;This is a post in the &lt;a href=&#34;https://martintrojer.github.io/categories/beyond-clojure/&#34;&gt;Beyond Clojure&lt;/a&gt; blog series, in which a Clojure developer looks at typed languages for web app development. In this episode we look at front-end development in the language Elm.&lt;/p&gt;&#xA;&lt;p&gt;Front end development targeting web browsers is a ghetto, everybody seems to agree. The core tools at our disposal are the amalgamation of ideas and accidents thrown together without much overall strategy. One positive development in recent years has been the drastic improvement of the JavaScript (JS) engines in popular browsers. They have now gotten so good that its a valid option to treat JS as a compilation target. This fact is one of the drivers behind the explosion of JS transpilers, there are now literally hundreds of languages that (either primarily or as an after-though) can compile to JS. These languages range from light syntax improvements (ala &lt;a href=&#34;http://coffeescript.org/&#34;&gt;CoffeScript&lt;/a&gt;) to full blown languages with big runtimes and everything in between.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Beyond Clojure: Haskell</title>
      <link>https://martintrojer.github.io/post/2016-04-21-beyond-clojure-haskell/</link>
      <pubDate>Thu, 21 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://martintrojer.github.io/post/2016-04-21-beyond-clojure-haskell/</guid>
      <description>&lt;p&gt;This is a post in the  &lt;a href=&#34;https://martintrojer.github.io/categories/beyond-clojure/&#34;&gt;Beyond Clojure&lt;/a&gt; blog series, in which a Clojure developer looks at typed languages for web app development. This is by no means a complete survey of the Haskell web development landscape, rather a random collection of thoughts.&lt;/p&gt;&#xA;&lt;p&gt;If you are interested in typed functional languages one stands taller than the rest. Its impossible not to get sucked into the Haskell vortex, but why fight it? In spite of its reputation of being extremely hard to learn and even harder to master, there are several excellent resources out there and you are guaranteed to learn a lots of very valuable lessons.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Beyond Clojure: Prelude</title>
      <link>https://martintrojer.github.io/post/2016-04-19-beyond-clojure-prelude/</link>
      <pubDate>Tue, 19 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://martintrojer.github.io/post/2016-04-19-beyond-clojure-prelude/</guid>
      <description>&lt;p&gt;Here we are, after five years of learning and later doing Clojure full time, I&amp;rsquo;ve come to the point where I am seriously looking around for alternatives. I&amp;rsquo;ve gotten very comfortable working in Clojure, and it has and will continue to serve me very well. But getting comfortable has a flip-side, you stop caring.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
