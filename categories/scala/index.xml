<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scala on Martin Trojer</title>
    <link>https://martintrojer.github.io/categories/scala/</link>
    <description>Recent content in Scala on Martin Trojer</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 25 Jun 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://martintrojer.github.io/categories/scala/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Announcing Frins, a practical unit of measure calculator DSL for Scala</title>
      <link>https://martintrojer.github.io/post/2013-06-25-announcing-frins-a-practical-unit-of-measure-calculator-dsl-for-scala/</link>
      <pubDate>Tue, 25 Jun 2013 00:00:00 +0000</pubDate>
      <guid>https://martintrojer.github.io/post/2013-06-25-announcing-frins-a-practical-unit-of-measure-calculator-dsl-for-scala/</guid>
      <description>&lt;p&gt;I am proud to announce a new Scala project called &amp;ldquo;Frins.&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;Frins is a practical unit-of-measure calculator DSL for Scala.&lt;/p&gt;&#xA;&lt;p&gt;Key features:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Tracks units of measure through all calculations, allowing you to mix units of measure transparently&lt;/li&gt;&#xA;&lt;li&gt;Comes with a &lt;strong&gt;huge&lt;/strong&gt; database of units and conversion factors&lt;/li&gt;&#xA;&lt;li&gt;Inspired by the &lt;a href=&#34;http://futureboy.us/frinkdocs/&#34;&gt;Frink project&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Full source code is available on &lt;a href=&#34;https://github.com/martintrojer/frins&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;To whet your appetite, head straight over to the &lt;a href=&#34;https://github.com/martintrojer/frins/blob/master/src/main/scala/frins/ExampleCalculations.scala&#34;&gt;example calculations&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h3 id=&#34;how-frins-came-about&#34;&gt;How Frins Came About&lt;/h3&gt;&#xA;&lt;p&gt;About a year ago, I created &lt;a href=&#34;https://github.com/martintrojer/frinj&#34;&gt;Frinj&lt;/a&gt;. With Frinj, I tried to marry some of the joys of one of my favorite programming languages (Frink) with the Clojure REPL. I was quite pleased with the results, and the response was encouraging.&lt;/p&gt;</description>
    </item>
    <item>
      <title>EDN Parser in Scala</title>
      <link>https://martintrojer.github.io/post/2013-06-17-edn-parser-in-scala/</link>
      <pubDate>Mon, 17 Jun 2013 00:00:00 +0000</pubDate>
      <guid>https://martintrojer.github.io/post/2013-06-17-edn-parser-in-scala/</guid>
      <description>&lt;p&gt;Taken from &lt;a href=&#34;https://github.com/martintrojer/edn-scala&#34;&gt;edn-scala&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Scheme in Scala</title>
      <link>https://martintrojer.github.io/post/2013-06-06-scheme-in-scala/</link>
      <pubDate>Thu, 06 Jun 2013 00:00:00 +0000</pubDate>
      <guid>https://martintrojer.github.io/post/2013-06-06-scheme-in-scala/</guid>
      <description>&lt;p&gt;In this post, I present some of my experiences writing a &lt;a href=&#34;https://github.com/martintrojer/scheme-scala&#34;&gt;Scheme interpreter in Scala&lt;/a&gt; (as an external DSL) and compare it with my recent similar experiences in Clojure and F#.&lt;/p&gt;&#xA;&lt;p&gt;Overall, the Scala solution is very similar to the &lt;a href=&#34;https://github.com/martintrojer/scheme-fsharp&#34;&gt;F# one&lt;/a&gt;. Not very surprising, since the problem lends itself well to case classes / discriminated union types and pattern matching. One difference is more type declarations in Scala, due to the lack of Hindley-Milner type inference. Scala uses a &amp;ldquo;flow-based&amp;rdquo; type inferrer, which is less powerful than ML but apparently works better for OO subclasses, etc. I will look into this in a future blog post.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Scala and me</title>
      <link>https://martintrojer.github.io/post/2013-06-01-scala-and-me/</link>
      <pubDate>Sat, 01 Jun 2013 00:00:00 +0000</pubDate>
      <guid>https://martintrojer.github.io/post/2013-06-01-scala-and-me/</guid>
      <description>&lt;figure class=&#34;floatright&#34;&gt;&lt;img src=&#34;https://martintrojer.github.io/assets/images/scalame/martin.png&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;This epic journey (yeah right) began at university with discovering the mighty &lt;a href=&#34;http://mitpress.mit.edu/sicp/&#34;&gt;SICP&lt;/a&gt;, still the best book on programming I&amp;rsquo;ve read (and let&amp;rsquo;s face it, the best I will ever read). After that profound experience, I kept an eye on the Lisp/FP world and wrote some toys in &lt;a href=&#34;http://plt-scheme.org/&#34;&gt;Scheme&lt;/a&gt;, &lt;a href=&#34;http://en.wikipedia.org/wiki/Emacs_Lisp&#34;&gt;ELisp&lt;/a&gt;, and &lt;a href=&#34;http://ocaml.org/&#34;&gt;OCaml&lt;/a&gt; every now and then. One thing that dawned on me was that none of these languages had much practical use; they weren&amp;rsquo;t very applicable to real-world software problems. While very clever and mind-expanding, they seemed mainly an academic exercise. There were zero jobs out there using these languages. Heck, hardly any of my peers had heard of or cared about them.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
